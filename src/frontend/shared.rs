use std::io;
use std::sync::Arc;
use std::sync::RwLock;

pub fn err<T : std::string::ToString>(e : T) -> io::Error {
    io::Error::new(io::ErrorKind::Other, e.to_string())
}

#[derive(Copy, Clone, PartialEq)]
pub enum Command {
    Start,
    Stop,
    Exit
}

#[derive(PartialEq)]
pub enum State {
    Running,
    Paused,
    Exit
}

pub struct Data {
    pub screen : RwLock<[u8; 256 * 240]>,
    pub controller : RwLock<u8>,
    pub commands : RwLock<Vec<Command>>,
}


pub fn new() -> (Arc<Data>, Arc<Data>){
   let screen = RwLock::new([0; 256 * 240]); 
   let controller = RwLock::new(0);
   let commands = RwLock::new(vec![]);

   let shared_data = Data{screen, controller, commands};
   let arc = Arc::new(shared_data);
   let a1 = arc.clone();
   let a2 = arc.clone();
   (a1, a2)
}

pub fn color_to_rgba(color : u8) -> (u8, u8, u8, u8){
    match color {
        0x00 => { (084, 084, 084, 255) } 
        0x01 => { (000, 030, 116, 255) } 
        0x02 => { (008, 016, 144, 255) } 
        0x03 => { (048, 000, 136, 255) } 
        0x04 => { (068, 000, 100, 255) } 
        0x05 => { (092, 000, 048, 255) } 
        0x06 => { (084, 004, 000, 255) } 
        0x07 => { (060, 024, 000, 255) } 
        0x08 => { (032, 042, 000, 255) } 
        0x09 => { (008, 058, 000, 255) } 
        0x0A => { (000, 064, 000, 255) } 
        0x0B => { (000, 060, 000, 255) } 
        0x0C => { (000, 050, 060, 255) } 
        0x0D => { (000, 000, 000, 255) } 
        0x0E => { (000, 000, 000, 255) } 
        0x0F => { (000, 000, 000, 255) } 
        0x10 => { (152, 150, 152, 255) } 
        0x11 => { (008, 076, 196, 255) } 
        0x12 => { (048, 050, 236, 255) } 
        0x13 => { (092, 030, 228, 255) } 
        0x14 => { (136, 020, 176, 255) } 
        0x15 => { (160, 020, 100, 255) } 
        0x16 => { (152, 034, 032, 255) } 
        0x17 => { (120, 060, 000, 255) } 
        0x18 => { (084, 090, 000, 255) } 
        0x19 => { (040, 114, 000, 255) } 
        0x1A => { (008, 124, 000, 255) } 
        0x1B => { (000, 118, 040, 255) } 
        0x1C => { (000, 102, 120, 255) } 
        0x1D => { (000, 000, 000, 255) } 
        0x1E => { (000, 000, 000, 255) } 
        0x1F => { (000, 000, 000, 255) } 
        0x20 => { (236, 238, 236, 255) } 
        0x21 => { (076, 154, 236, 255) } 
        0x22 => { (120, 124, 236, 255) } 
        0x23 => { (176, 098, 236, 255) } 
        0x24 => { (228, 084, 236, 255) } 
        0x25 => { (236, 088, 180, 255) } 
        0x26 => { (236, 106, 100, 255) } 
        0x27 => { (212, 136, 032, 255) } 
        0x28 => { (160, 170, 000, 255) } 
        0x29 => { (116, 196, 000, 255) } 
        0x2A => { (076, 208, 032, 255) } 
        0x2B => { (056, 204, 108, 255) } 
        0x2C => { (056, 180, 204, 255) } 
        0x2D => { (060, 060, 060, 255) } 
        0x2E => { (000, 000, 000, 255) } 
        0x2F => { (000, 000, 000, 255) } 
        0x30 => { (236, 238, 236, 255) } 
        0x31 => { (168, 204, 236, 255) } 
        0x32 => { (188, 188, 236, 255) } 
        0x33 => { (212, 178, 236, 255) } 
        0x34 => { (236, 174, 236, 255) } 
        0x35 => { (236, 174, 212, 255) } 
        0x36 => { (236, 180, 176, 255) } 
        0x37 => { (228, 196, 144, 255) } 
        0x38 => { (204, 210, 120, 255) } 
        0x39 => { (180, 222, 120, 255) } 
        0x3A => { (168, 226, 144, 255) } 
        0x3B => { (152, 226, 180, 255) } 
        0x3C => { (160, 214, 228, 255) } 
        0x3D => { (160, 162, 160, 255) } 
        0x3E => { (000, 000, 000, 255) } 
        0x3F => { (000, 000, 000, 255) } 
        _ => { (000, 000, 000, 255) }
    }
}
